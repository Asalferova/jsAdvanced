// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
//     title: "Название альбома",
//     artist: "Исполнитель",
//     year: "Год выпуска"
//  }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

alboms = [
  {
    title: "Love",
    artist: "Martin",
    year: "1999",
  },
  {
    title: "Belive",
    artist: "Astenna",
    year: "2011",
  },
  {
    title: "People",
    artist: "Rick",
    year: "1989",
  },
];

const musicCollection = {
  alboms: [...alboms],
  [Symbol.iterator]: function () {
    let index = 0;
    return {
      next: () => {
        if (index < this.alboms.length) {
          return { value: this.alboms[index++], done: false };
        } else {
          return { done: true };
        }
      },
    };
  },
};

for (let albom of musicCollection) {
  console.log(`${albom.title} - ${albom.artist} ${albom.year}`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

// Создание Map для отслеживания поваров и их специализаций
let chefs = new Map();
chefs.set("Виктор", "Пицца");
chefs.set("Ольга", "Суши");
chefs.set("Дмитрий", "Десерты");

// Создание Map для отслеживания блюд и их поваров
let dishes = new Map();
dishes.set("Пицца Маргарита", "Виктор");
dishes.set("Пицца Пепперони", "Виктор");
dishes.set("Суши Филадельфия", "Ольга");
dishes.set("Суши Калифорния", "Ольга");
dishes.set("Тирамису", "Дмитрий");
dishes.set("Чизкейк", "Дмитрий");

// Создание Map для отслеживания заказов каждого клиента
let orders = new Map();

let alexey = new Set();
alexey.add("Пицца Пепперони");
alexey.add("Тирамису");

let maria = new Set();
maria.add("Суши Калифорния");
maria.add("Пицца Маргарита");

let irina = new Set();
irina.add("Чизкейк");

let alexeyObject = { name: "Алексей" };
let mariaObject = { name: "Мария" };
let irinaObject = { name: "Ирина" };

orders.set(alexeyObject, alexey);
orders.set(mariaObject, maria);
orders.set(irinaObject, irina);

console.log(
  `Повар, готовящий Пицца Пепперони: ${dishes.get("Пицца Пепперони")}`
);
console.log(`Блюда, заказанные Алексеем: ${[...orders.get(alexeyObject)]}`);
console.log(`Блюда, заказанные Марией: ${[...orders.get(mariaObject)]}`);
console.log(`Блюда, заказанные Ириной: ${[...orders.get(irinaObject)]}`);
